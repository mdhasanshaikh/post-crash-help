{"ast":null,"code":"var _jsxFileName = \"/Users/mdhasan/Desktop/md/post_crash_help/mongo_db/client/src/components/content-holder.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getAccidents, updateAccident } from \"../actions/accidentActions\";\nimport { getUsers } from \"../actions/userActions\";\nimport { getAmbulances } from \"../actions/ambulanceActions\";\nimport PropTypes from \"prop-types\";\nimport RecordList from \"./record-list\";\nimport AlertPopup from \"./alert-popup\";\nimport NotificationCenter from \"../components/notification-center/notification-center\";\n\nclass ContentHolder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      accident: {\n        accidents: []\n      },\n      user: {},\n      ambulance: {},\n      clickedAccident: {}\n    };\n\n    this.getAllServedAccidents = async (accidents, users) => {\n      if (accidents.length) {\n        accidents = accidents.filter(accident => accident.serve);\n        console.log(accidents);\n        let serverdAccidents = [];\n        await accidents.map(accident => {\n          return users.map(user => {\n            if (user.vehicle_id === accident.vehicle_id) {\n              let formatedAccident = {};\n              formatedAccident.id = accident._id;\n              formatedAccident.patientName = user.name;\n              formatedAccident.descript = [{\n                key: 0,\n                title: \"Vehicle no.\",\n                text: accident.vehicle_id\n              }, {\n                key: 1,\n                title: \"Medical condition\",\n                text: user.medical_condition\n              }, {\n                key: 2,\n                title: \"Location\",\n                text: accident.latitude + \", \" + accident.longitude\n              }];\n              serverdAccidents.push(formatedAccident);\n            }\n          });\n        });\n        console.log(serverdAccidents); //   allAccidents = allAccidents.sort((a, b) => (a.date < b.date ? 1 : -1));\n        //   let servedAccidents = allAccidents.map(accident => {\n        //     let formatedAccident = {};\n        //     formatedAccident.id = accident.id;\n        //     formatedAccident.patientName = accident.name;\n        //     formatedAccident.descript = [\n        //       {\n        //         key: 0,\n        //         title: \"Vehicle no.\",\n        //         text: accident.vehicle_no\n        //       },\n        //       {\n        //         key: 1,\n        //         title: \"Medical condition\",\n        //         text: accident.medical_condotion\n        //       },\n        //       {\n        //         key: 2,\n        //         title: \"Location\",\n        //         text: accident.latitude + \", \" + accident.longitude\n        //       }\n        //     ];\n        //     return formatedAccident;\n        //   });\n        //   return servedAccidents;\n      } // return {};\n\n    };\n\n    this.getAllUnServedAccidents = _ => {\n      let allAccidents = this.state.accident.accidents;\n      allAccidents = allAccidents.filter(accident => accident.served === 0);\n      allAccidents = allAccidents.sort((a, b) => a.date < b.date ? 1 : -1);\n      let servedAccidents = allAccidents.map(accident => {\n        let formatedAccident = {};\n        formatedAccident.id = accident.id;\n        formatedAccident.patientName = accident.name;\n        formatedAccident.date = accident.date;\n        formatedAccident.license_no = accident.license_no;\n        formatedAccident.location = accident.location;\n        return formatedAccident;\n      });\n      return servedAccidents;\n    };\n  }\n\n  componentDidMount() {\n    this.props.getAccidents();\n    this.props.getUsers();\n    this.props.getAmbulances();\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"main\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"listTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"All accidents\"), React.createElement(RecordList, {\n      accidents: this.getAllServedAccidents(this.props.accident.accidents, this.props.user.users),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    })), React.createElement(NotificationCenter, {\n      accidents: this.getAllUnServedAccidents(),\n      handleNotificationItemClick: this.handleNotificationItemClick,\n      handleServedBtnClick: this.handleServedBtnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), Object.entries(this.state.clickedAccident).length === 0 ? null : React.createElement(AlertPopup, {\n      accident: this.state.clickedAccident,\n      handleAlertBoxClose: this.handleAlertBoxClose,\n      handleServedBtnClick: this.handleServedBtnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }));\n  }\n\n}\n\nContentHolder.propTypes = {\n  getAccidents: PropTypes.func.isRequired,\n  accident: PropTypes.object.isRequired,\n  user: PropTypes.object.isRequired,\n  ambulance: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  accident: state.accident,\n  user: state.user,\n  ambulance: state.ambulance\n});\n\nexport default connect(mapStateToProps, {\n  getAccidents,\n  updateAccident,\n  getUsers,\n  getAmbulances\n})(ContentHolder);","map":{"version":3,"sources":["/Users/mdhasan/Desktop/md/post_crash_help/mongo_db/client/src/components/content-holder.jsx"],"names":["React","Component","connect","getAccidents","updateAccident","getUsers","getAmbulances","PropTypes","RecordList","AlertPopup","NotificationCenter","ContentHolder","state","accident","accidents","user","ambulance","clickedAccident","getAllServedAccidents","users","length","filter","serve","console","log","serverdAccidents","map","vehicle_id","formatedAccident","id","_id","patientName","name","descript","key","title","text","medical_condition","latitude","longitude","push","getAllUnServedAccidents","_","allAccidents","served","sort","a","b","date","servedAccidents","license_no","location","componentDidMount","props","render","handleNotificationItemClick","handleServedBtnClick","Object","entries","handleAlertBoxClose","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { getAccidents, updateAccident } from \"../actions/accidentActions\";\nimport { getUsers } from \"../actions/userActions\";\nimport { getAmbulances } from \"../actions/ambulanceActions\";\nimport PropTypes from \"prop-types\";\n\nimport RecordList from \"./record-list\";\nimport AlertPopup from \"./alert-popup\";\nimport NotificationCenter from \"../components/notification-center/notification-center\";\n\nclass ContentHolder extends Component {\n  state = {\n    accident: {\n      accidents: []\n    },\n    user: {},\n    ambulance: {},\n    clickedAccident: {}\n  };\n\n  componentDidMount() {\n    this.props.getAccidents();\n    this.props.getUsers();\n    this.props.getAmbulances();\n  }\n\n  getAllServedAccidents = async (accidents, users) => {\n    if (accidents.length) {\n      accidents = accidents.filter(accident => accident.serve);\n      console.log(accidents);\n      let serverdAccidents = [];\n      await accidents.map(accident => {\n        return users.map(user => {\n          if (user.vehicle_id === accident.vehicle_id) {\n            let formatedAccident = {};\n            formatedAccident.id = accident._id;\n            formatedAccident.patientName = user.name;\n            formatedAccident.descript = [\n              {\n                key: 0,\n                title: \"Vehicle no.\",\n                text: accident.vehicle_id\n              },\n              {\n                key: 1,\n                title: \"Medical condition\",\n                text: user.medical_condition\n              },\n              {\n                key: 2,\n                title: \"Location\",\n                text: accident.latitude + \", \" + accident.longitude\n              }\n            ];\n            serverdAccidents.push(formatedAccident);\n          }\n        });\n      });\n\n      console.log(serverdAccidents);\n      //   allAccidents = allAccidents.sort((a, b) => (a.date < b.date ? 1 : -1));\n      //   let servedAccidents = allAccidents.map(accident => {\n      //     let formatedAccident = {};\n      //     formatedAccident.id = accident.id;\n      //     formatedAccident.patientName = accident.name;\n      //     formatedAccident.descript = [\n      //       {\n      //         key: 0,\n      //         title: \"Vehicle no.\",\n      //         text: accident.vehicle_no\n      //       },\n      //       {\n      //         key: 1,\n      //         title: \"Medical condition\",\n      //         text: accident.medical_condotion\n      //       },\n      //       {\n      //         key: 2,\n      //         title: \"Location\",\n      //         text: accident.latitude + \", \" + accident.longitude\n      //       }\n      //     ];\n      //     return formatedAccident;\n      //   });\n      //   return servedAccidents;\n    }\n    // return {};\n  };\n\n  getAllUnServedAccidents = _ => {\n    let allAccidents = this.state.accident.accidents;\n\n    allAccidents = allAccidents.filter(accident => accident.served === 0);\n    allAccidents = allAccidents.sort((a, b) => (a.date < b.date ? 1 : -1));\n\n    let servedAccidents = allAccidents.map(accident => {\n      let formatedAccident = {};\n\n      formatedAccident.id = accident.id;\n      formatedAccident.patientName = accident.name;\n      formatedAccident.date = accident.date;\n      formatedAccident.license_no = accident.license_no;\n      formatedAccident.location = accident.location;\n\n      return formatedAccident;\n    });\n\n    return servedAccidents;\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <main>\n          <div className=\"listTitle\">All accidents</div>\n          <RecordList\n            accidents={this.getAllServedAccidents(\n              this.props.accident.accidents,\n              this.props.user.users\n            )}\n          />\n          {/* <RecordList accidents={this.getAllServedAccidents()} /> */}\n        </main>\n\n        <NotificationCenter\n          accidents={this.getAllUnServedAccidents()}\n          handleNotificationItemClick={this.handleNotificationItemClick}\n          handleServedBtnClick={this.handleServedBtnClick}\n        />\n\n        {Object.entries(this.state.clickedAccident).length === 0 ? null : (\n          <AlertPopup\n            accident={this.state.clickedAccident}\n            handleAlertBoxClose={this.handleAlertBoxClose}\n            handleServedBtnClick={this.handleServedBtnClick}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nContentHolder.propTypes = {\n  getAccidents: PropTypes.func.isRequired,\n  accident: PropTypes.object.isRequired,\n  user: PropTypes.object.isRequired,\n  ambulance: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  accident: state.accident,\n  user: state.user,\n  ambulance: state.ambulance\n});\n\nexport default connect(mapStateToProps, {\n  getAccidents,\n  updateAccident,\n  getUsers,\n  getAmbulances\n})(ContentHolder);\n"]},"metadata":{},"sourceType":"module"}