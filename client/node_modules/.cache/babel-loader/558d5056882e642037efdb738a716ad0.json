{"ast":null,"code":"var _jsxFileName = \"/Users/mdhasan/Desktop/md/post_crash_help/mongo_db/client/src/components/content-holder.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getAccidents, updateAccident } from \"../actions/accidentActions\";\nimport { getUsers } from \"../actions/userActions\";\nimport { getAmbulances } from \"../actions/ambulanceActions\";\nimport PropTypes from \"prop-types\";\nimport RecordList from \"./record-list\";\nimport AlertPopup from \"./alert-popup\";\nimport NotificationCenter from \"../components/notification-center/notification-center\";\n\nclass ContentHolder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      accident: {\n        accidents: []\n      },\n      user: {},\n      ambulance: {},\n      clickedAccident: {}\n    };\n\n    this.getAllServedAccidents = (accidents, users) => {\n      console.log(\"Accidents: \", accidents);\n      console.log(\"Users: \", users); // let allAccidents = this.state.accident.accidents;\n\n      if (accidents.length) {\n        allAccidents = allAccidents.filter(accident => accident.served === 1);\n        allAccidents = allAccidents.sort((a, b) => a.date < b.date ? 1 : -1);\n        let servedAccidents = allAccidents.map(accident => {\n          let formatedAccident = {};\n          formatedAccident.id = accident.id;\n          formatedAccident.patientName = accident.name;\n          formatedAccident.descript = [{\n            key: 0,\n            title: \"Vehicle no.\",\n            text: accident.vehicle_no\n          }, {\n            key: 1,\n            title: \"Medical condition\",\n            text: accident.medical_condotion\n          }, {\n            key: 2,\n            title: \"Location\",\n            text: accident.latitude + \", \" + accident.longitude\n          }];\n          return formatedAccident;\n        });\n        return servedAccidents;\n      } // return {};\n\n    };\n\n    this.getAllUnServedAccidents = _ => {\n      let allAccidents = this.state.accident.accidents;\n      allAccidents = allAccidents.filter(accident => accident.served === 0);\n      allAccidents = allAccidents.sort((a, b) => a.date < b.date ? 1 : -1);\n      let servedAccidents = allAccidents.map(accident => {\n        let formatedAccident = {};\n        formatedAccident.id = accident.id;\n        formatedAccident.patientName = accident.name;\n        formatedAccident.date = accident.date;\n        formatedAccident.license_no = accident.license_no;\n        formatedAccident.location = accident.location;\n        return formatedAccident;\n      });\n      return servedAccidents;\n    };\n  }\n\n  componentDidMount() {\n    this.props.getAccidents();\n    this.props.getUsers();\n    this.props.getAmbulances();\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"main\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"listTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"All accidents\"), React.createElement(RecordList, {\n      accidents: this.getAllServedAccidents(this.props.accident.accidents, this.props.user.users),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    })), React.createElement(NotificationCenter, {\n      accidents: this.getAllUnServedAccidents(),\n      handleNotificationItemClick: this.handleNotificationItemClick,\n      handleServedBtnClick: this.handleServedBtnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), Object.entries(this.state.clickedAccident).length === 0 ? null : React.createElement(AlertPopup, {\n      accident: this.state.clickedAccident,\n      handleAlertBoxClose: this.handleAlertBoxClose,\n      handleServedBtnClick: this.handleServedBtnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }));\n  }\n\n}\n\nContentHolder.propTypes = {\n  getAccidents: PropTypes.func.isRequired,\n  accident: PropTypes.object.isRequired,\n  user: PropTypes.object.isRequired,\n  ambulance: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  accident: state.accident,\n  user: state.user,\n  ambulance: state.ambulance\n});\n\nexport default connect(mapStateToProps, {\n  getAccidents,\n  updateAccident,\n  getUsers,\n  getAmbulances\n})(ContentHolder);","map":{"version":3,"sources":["/Users/mdhasan/Desktop/md/post_crash_help/mongo_db/client/src/components/content-holder.jsx"],"names":["React","Component","connect","getAccidents","updateAccident","getUsers","getAmbulances","PropTypes","RecordList","AlertPopup","NotificationCenter","ContentHolder","state","accident","accidents","user","ambulance","clickedAccident","getAllServedAccidents","users","console","log","length","allAccidents","filter","served","sort","a","b","date","servedAccidents","map","formatedAccident","id","patientName","name","descript","key","title","text","vehicle_no","medical_condotion","latitude","longitude","getAllUnServedAccidents","_","license_no","location","componentDidMount","props","render","handleNotificationItemClick","handleServedBtnClick","Object","entries","handleAlertBoxClose","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { getAccidents, updateAccident } from \"../actions/accidentActions\";\nimport { getUsers } from \"../actions/userActions\";\nimport { getAmbulances } from \"../actions/ambulanceActions\";\nimport PropTypes from \"prop-types\";\n\nimport RecordList from \"./record-list\";\nimport AlertPopup from \"./alert-popup\";\nimport NotificationCenter from \"../components/notification-center/notification-center\";\n\nclass ContentHolder extends Component {\n  state = {\n    accident: {\n      accidents: []\n    },\n    user: {},\n    ambulance: {},\n    clickedAccident: {}\n  };\n\n  componentDidMount() {\n    this.props.getAccidents();\n    this.props.getUsers();\n    this.props.getAmbulances();\n  }\n\n  getAllServedAccidents = (accidents, users) => {\n    console.log(\"Accidents: \", accidents);\n    console.log(\"Users: \", users);\n    // let allAccidents = this.state.accident.accidents;\n    if (accidents.length) {\n      allAccidents = allAccidents.filter(accident => accident.served === 1);\n      allAccidents = allAccidents.sort((a, b) => (a.date < b.date ? 1 : -1));\n      let servedAccidents = allAccidents.map(accident => {\n        let formatedAccident = {};\n        formatedAccident.id = accident.id;\n        formatedAccident.patientName = accident.name;\n        formatedAccident.descript = [\n          {\n            key: 0,\n            title: \"Vehicle no.\",\n            text: accident.vehicle_no\n          },\n          {\n            key: 1,\n            title: \"Medical condition\",\n            text: accident.medical_condotion\n          },\n          {\n            key: 2,\n            title: \"Location\",\n            text: accident.latitude + \", \" + accident.longitude\n          }\n        ];\n        return formatedAccident;\n      });\n      return servedAccidents;\n    }\n    // return {};\n  };\n\n  getAllUnServedAccidents = _ => {\n    let allAccidents = this.state.accident.accidents;\n\n    allAccidents = allAccidents.filter(accident => accident.served === 0);\n    allAccidents = allAccidents.sort((a, b) => (a.date < b.date ? 1 : -1));\n\n    let servedAccidents = allAccidents.map(accident => {\n      let formatedAccident = {};\n\n      formatedAccident.id = accident.id;\n      formatedAccident.patientName = accident.name;\n      formatedAccident.date = accident.date;\n      formatedAccident.license_no = accident.license_no;\n      formatedAccident.location = accident.location;\n\n      return formatedAccident;\n    });\n\n    return servedAccidents;\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <main>\n          <div className=\"listTitle\">All accidents</div>\n          <RecordList\n            accidents={this.getAllServedAccidents(\n              this.props.accident.accidents,\n              this.props.user.users\n            )}\n          />\n          {/* <RecordList accidents={this.getAllServedAccidents()} /> */}\n        </main>\n\n        <NotificationCenter\n          accidents={this.getAllUnServedAccidents()}\n          handleNotificationItemClick={this.handleNotificationItemClick}\n          handleServedBtnClick={this.handleServedBtnClick}\n        />\n\n        {Object.entries(this.state.clickedAccident).length === 0 ? null : (\n          <AlertPopup\n            accident={this.state.clickedAccident}\n            handleAlertBoxClose={this.handleAlertBoxClose}\n            handleServedBtnClick={this.handleServedBtnClick}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nContentHolder.propTypes = {\n  getAccidents: PropTypes.func.isRequired,\n  accident: PropTypes.object.isRequired,\n  user: PropTypes.object.isRequired,\n  ambulance: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  accident: state.accident,\n  user: state.user,\n  ambulance: state.ambulance\n});\n\nexport default connect(mapStateToProps, {\n  getAccidents,\n  updateAccident,\n  getUsers,\n  getAmbulances\n})(ContentHolder);\n"]},"metadata":{},"sourceType":"module"}