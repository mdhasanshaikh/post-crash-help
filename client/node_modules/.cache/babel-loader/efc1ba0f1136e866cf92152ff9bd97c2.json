{"ast":null,"code":"var _jsxFileName = \"/Users/mdhasan/Desktop/md/post_crash_help/mongo_db/client/src/components/content-holder.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getAccidents, updateAccident } from \"../actions/accidentActions\";\nimport { getUsers } from \"../actions/userActions\";\nimport { getAmbulances } from \"../actions/ambulanceActions\";\nimport PropTypes from \"prop-types\";\nimport RecordList from \"./record-list\";\nimport AlertPopup from \"./alert-popup\";\nimport NotificationCenter from \"../components/notification-center/notification-center\";\n\nclass ContentHolder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      accident: {\n        accidents: []\n      },\n      user: {},\n      ambulance: {},\n      clickedAccident: {}\n    };\n\n    this.getAllAccidents = async (serve, accidents, users) => {\n      if (accidents.length) {\n        accidents = accidents.filter(accident => accident.serve === serve);\n        let allAccidents = [];\n        await accidents.map(accident => {\n          return users.map(user => {\n            if (user.vehicle_id === accident.vehicle_id) {\n              let formatedAccident = {};\n              formatedAccident.id = accident._id;\n              formatedAccident.patientName = user.name;\n              formatedAccident.descript = [{\n                key: 0,\n                title: \"Vehicle no.\",\n                text: accident.vehicle_id\n              }, {\n                key: 1,\n                title: \"Medical condition\",\n                text: user.medical_condition\n              }, {\n                key: 2,\n                title: \"Location\",\n                text: accident.latitude + \", \" + accident.longitude\n              }];\n              allAccidents.push(formatedAccident);\n            }\n          });\n        });\n        console.log(allAccidents);\n      }\n\n      return [];\n    };\n\n    this.getAllUnServedAccidents = _ => {\n      let allAccidents = this.state.accident.accidents;\n      allAccidents = allAccidents.filter(accident => accident.served === 0);\n      allAccidents = allAccidents.sort((a, b) => a.date < b.date ? 1 : -1);\n      let servedAccidents = allAccidents.map(accident => {\n        let formatedAccident = {};\n        formatedAccident.id = accident.id;\n        formatedAccident.patientName = accident.name;\n        formatedAccident.date = accident.date;\n        formatedAccident.license_no = accident.license_no;\n        formatedAccident.location = accident.location;\n        return formatedAccident;\n      });\n      return servedAccidents;\n    };\n  }\n\n  componentDidMount() {\n    this.props.getAccidents();\n    this.props.getUsers();\n    this.props.getAmbulances();\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"main\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"listTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"All accidents\"), React.createElement(RecordList, {\n      accidents: this.getAllAccidents(true, this.props.accident.accidents, this.props.user.users),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    })), React.createElement(NotificationCenter, {\n      accidents: this.getAllAccidents(false, this.props.accident.accidents, this.props.user.users),\n      handleNotificationItemClick: this.handleNotificationItemClick,\n      handleServedBtnClick: this.handleServedBtnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), Object.entries(this.state.clickedAccident).length === 0 ? null : React.createElement(AlertPopup, {\n      accident: this.state.clickedAccident,\n      handleAlertBoxClose: this.handleAlertBoxClose,\n      handleServedBtnClick: this.handleServedBtnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }));\n  }\n\n}\n\nContentHolder.propTypes = {\n  getAccidents: PropTypes.func.isRequired,\n  accident: PropTypes.object.isRequired,\n  user: PropTypes.object.isRequired,\n  ambulance: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  accident: state.accident,\n  user: state.user,\n  ambulance: state.ambulance\n});\n\nexport default connect(mapStateToProps, {\n  getAccidents,\n  updateAccident,\n  getUsers,\n  getAmbulances\n})(ContentHolder);","map":{"version":3,"sources":["/Users/mdhasan/Desktop/md/post_crash_help/mongo_db/client/src/components/content-holder.jsx"],"names":["React","Component","connect","getAccidents","updateAccident","getUsers","getAmbulances","PropTypes","RecordList","AlertPopup","NotificationCenter","ContentHolder","state","accident","accidents","user","ambulance","clickedAccident","getAllAccidents","serve","users","length","filter","allAccidents","map","vehicle_id","formatedAccident","id","_id","patientName","name","descript","key","title","text","medical_condition","latitude","longitude","push","console","log","getAllUnServedAccidents","_","served","sort","a","b","date","servedAccidents","license_no","location","componentDidMount","props","render","handleNotificationItemClick","handleServedBtnClick","Object","entries","handleAlertBoxClose","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { getAccidents, updateAccident } from \"../actions/accidentActions\";\nimport { getUsers } from \"../actions/userActions\";\nimport { getAmbulances } from \"../actions/ambulanceActions\";\nimport PropTypes from \"prop-types\";\n\nimport RecordList from \"./record-list\";\nimport AlertPopup from \"./alert-popup\";\nimport NotificationCenter from \"../components/notification-center/notification-center\";\n\nclass ContentHolder extends Component {\n  state = {\n    accident: {\n      accidents: []\n    },\n    user: {},\n    ambulance: {},\n    clickedAccident: {}\n  };\n\n  componentDidMount() {\n    this.props.getAccidents();\n    this.props.getUsers();\n    this.props.getAmbulances();\n  }\n\n  getAllAccidents = async (serve, accidents, users) => {\n    if (accidents.length) {\n      accidents = accidents.filter(accident => accident.serve === serve);\n\n      let allAccidents = [];\n      await accidents.map(accident => {\n        return users.map(user => {\n          if (user.vehicle_id === accident.vehicle_id) {\n            let formatedAccident = {};\n            formatedAccident.id = accident._id;\n            formatedAccident.patientName = user.name;\n            formatedAccident.descript = [\n              {\n                key: 0,\n                title: \"Vehicle no.\",\n                text: accident.vehicle_id\n              },\n              {\n                key: 1,\n                title: \"Medical condition\",\n                text: user.medical_condition\n              },\n              {\n                key: 2,\n                title: \"Location\",\n                text: accident.latitude + \", \" + accident.longitude\n              }\n            ];\n            allAccidents.push(formatedAccident);\n          }\n        });\n      });\n\n      console.log(allAccidents);\n    }\n    return [];\n  };\n\n  getAllUnServedAccidents = _ => {\n    let allAccidents = this.state.accident.accidents;\n\n    allAccidents = allAccidents.filter(accident => accident.served === 0);\n    allAccidents = allAccidents.sort((a, b) => (a.date < b.date ? 1 : -1));\n\n    let servedAccidents = allAccidents.map(accident => {\n      let formatedAccident = {};\n\n      formatedAccident.id = accident.id;\n      formatedAccident.patientName = accident.name;\n      formatedAccident.date = accident.date;\n      formatedAccident.license_no = accident.license_no;\n      formatedAccident.location = accident.location;\n\n      return formatedAccident;\n    });\n\n    return servedAccidents;\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <main>\n          <div className=\"listTitle\">All accidents</div>\n          <RecordList\n            accidents={this.getAllAccidents(\n              true,\n              this.props.accident.accidents,\n              this.props.user.users\n            )}\n          />\n          {/* <RecordList accidents={this.getAllServedAccidents()} /> */}\n        </main>\n\n        <NotificationCenter\n          accidents={this.getAllAccidents(\n            false,\n            this.props.accident.accidents,\n            this.props.user.users\n          )}\n          handleNotificationItemClick={this.handleNotificationItemClick}\n          handleServedBtnClick={this.handleServedBtnClick}\n        />\n\n        {Object.entries(this.state.clickedAccident).length === 0 ? null : (\n          <AlertPopup\n            accident={this.state.clickedAccident}\n            handleAlertBoxClose={this.handleAlertBoxClose}\n            handleServedBtnClick={this.handleServedBtnClick}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nContentHolder.propTypes = {\n  getAccidents: PropTypes.func.isRequired,\n  accident: PropTypes.object.isRequired,\n  user: PropTypes.object.isRequired,\n  ambulance: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  accident: state.accident,\n  user: state.user,\n  ambulance: state.ambulance\n});\n\nexport default connect(mapStateToProps, {\n  getAccidents,\n  updateAccident,\n  getUsers,\n  getAmbulances\n})(ContentHolder);\n"]},"metadata":{},"sourceType":"module"}