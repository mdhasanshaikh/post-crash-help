{"ast":null,"code":"var _jsxFileName = \"/Users/mdhasan/Desktop/md/post_crash_help/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport RecordList from \"./components/record-list\";\nimport AlertPopup from \"./components/alert-popup\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      accidents: []\n    };\n\n    this.getAllAccidents = _ => {\n      // const scope = this;\n      fetch(\"http://localhost:4000/accidents\").then(res => res.json()).then(res => this.setState({\n        accidents: res.data\n      })).catch(err => console.log(err));\n    };\n\n    this.getAllServedAccidents = () => {\n      const allAccidents = this.state.accidents;\n      console.log(allAccidents);\n      allAccidents = allAccidents.filter(accident => accident.served === 1);\n      let servedAccidents = allAccidents.map(accident => {\n        if (accident.served) {\n          let formatedAccident = {};\n          formatedAccident.id = accident.id;\n          formatedAccident.patientName = accident.name;\n          formatedAccident.date = accident.date;\n          formatedAccident.descript = [{\n            key: 0,\n            title: \"License no.\",\n            text: accident.license_no\n          }, {\n            key: 1,\n            title: \"Medical condition\",\n            text: accident.medical_cond\n          }, {\n            key: 2,\n            title: \"Location\",\n            text: accident.location\n          }];\n          return formatedAccident;\n        }\n\n        return null;\n      });\n      console.log(servedAccidents);\n      return servedAccidents;\n    };\n\n    this.getAllUnServedAccidents = () => {};\n  }\n\n  componentDidMount() {\n    this.getAllAccidents();\n  }\n\n  render() {\n    const accidents = this.state.accidents;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Post Crash Help\"), React.createElement(\"main\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"listTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"All accidents\"), React.createElement(RecordList, {\n      accidents: this.getAllServedAccidents(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/mdhasan/Desktop/md/post_crash_help/client/src/App.js"],"names":["React","Component","RecordList","AlertPopup","App","state","accidents","getAllAccidents","_","fetch","then","res","json","setState","data","catch","err","console","log","getAllServedAccidents","allAccidents","filter","accident","served","servedAccidents","map","formatedAccident","id","patientName","name","date","descript","key","title","text","license_no","medical_cond","location","getAllUnServedAccidents","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BI,KAD0B,GAClB;AACNC,MAAAA,SAAS,EAAE;AADL,KADkB;;AAAA,SAS1BC,eAT0B,GASRC,CAAC,IAAI;AACrB;AAEAC,MAAAA,KAAK,CAAC,iCAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQC,GAAG,IAAI,KAAKE,QAAL,CAAc;AAAEP,QAAAA,SAAS,EAAEK,GAAG,CAACG;AAAjB,OAAd,CAFf,EAGGC,KAHH,CAGSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAHhB;AAID,KAhByB;;AAAA,SAkB1BG,qBAlB0B,GAkBF,MAAM;AAC5B,YAAMC,YAAY,GAAG,KAAKf,KAAL,CAAWC,SAAhC;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAYE,YAAZ;AAEAA,MAAAA,YAAY,GAAGA,YAAY,CAACC,MAAb,CAAoBC,QAAQ,IAAIA,QAAQ,CAACC,MAAT,KAAoB,CAApD,CAAf;AACA,UAAIC,eAAe,GAAGJ,YAAY,CAACK,GAAb,CAAiBH,QAAQ,IAAI;AACjD,YAAIA,QAAQ,CAACC,MAAb,EAAqB;AACnB,cAAIG,gBAAgB,GAAG,EAAvB;AAEAA,UAAAA,gBAAgB,CAACC,EAAjB,GAAsBL,QAAQ,CAACK,EAA/B;AACAD,UAAAA,gBAAgB,CAACE,WAAjB,GAA+BN,QAAQ,CAACO,IAAxC;AACAH,UAAAA,gBAAgB,CAACI,IAAjB,GAAwBR,QAAQ,CAACQ,IAAjC;AAEAJ,UAAAA,gBAAgB,CAACK,QAAjB,GAA4B,CAC1B;AACEC,YAAAA,GAAG,EAAE,CADP;AAEEC,YAAAA,KAAK,EAAE,aAFT;AAGEC,YAAAA,IAAI,EAAEZ,QAAQ,CAACa;AAHjB,WAD0B,EAM1B;AACEH,YAAAA,GAAG,EAAE,CADP;AAEEC,YAAAA,KAAK,EAAE,mBAFT;AAGEC,YAAAA,IAAI,EAAEZ,QAAQ,CAACc;AAHjB,WAN0B,EAW1B;AACEJ,YAAAA,GAAG,EAAE,CADP;AAEEC,YAAAA,KAAK,EAAE,UAFT;AAGEC,YAAAA,IAAI,EAAEZ,QAAQ,CAACe;AAHjB,WAX0B,CAA5B;AAiBA,iBAAOX,gBAAP;AACD;;AACD,eAAO,IAAP;AACD,OA5BqB,CAAtB;AA8BAT,MAAAA,OAAO,CAACC,GAAR,CAAYM,eAAZ;AAEA,aAAOA,eAAP;AACD,KAxDyB;;AAAA,SA0D1Bc,uBA1D0B,GA0DA,MAAM,CAAE,CA1DR;AAAA;;AAK1BC,EAAAA,iBAAiB,GAAG;AAClB,SAAKhC,eAAL;AACD;;AAqDDiC,EAAAA,MAAM,GAAG;AACP,UAAMlC,SAAS,GAAG,KAAKD,KAAL,CAAWC,SAA7B;AAEA,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEE,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAE,KAAKa,qBAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAFF,CADF;AAUD;;AAzEyB;;AA4E5B,eAAef,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport RecordList from \"./components/record-list\";\nimport AlertPopup from \"./components/alert-popup\";\n\nclass App extends Component {\n  state = {\n    accidents: []\n  };\n\n  componentDidMount() {\n    this.getAllAccidents();\n  }\n\n  getAllAccidents = _ => {\n    // const scope = this;\n\n    fetch(\"http://localhost:4000/accidents\")\n      .then(res => res.json())\n      .then(res => this.setState({ accidents: res.data }))\n      .catch(err => console.log(err));\n  };\n\n  getAllServedAccidents = () => {\n    const allAccidents = this.state.accidents;\n    console.log(allAccidents);\n\n    allAccidents = allAccidents.filter(accident => accident.served === 1);\n    let servedAccidents = allAccidents.map(accident => {\n      if (accident.served) {\n        let formatedAccident = {};\n\n        formatedAccident.id = accident.id;\n        formatedAccident.patientName = accident.name;\n        formatedAccident.date = accident.date;\n\n        formatedAccident.descript = [\n          {\n            key: 0,\n            title: \"License no.\",\n            text: accident.license_no\n          },\n          {\n            key: 1,\n            title: \"Medical condition\",\n            text: accident.medical_cond\n          },\n          {\n            key: 2,\n            title: \"Location\",\n            text: accident.location\n          }\n        ];\n        return formatedAccident;\n      }\n      return null;\n    });\n\n    console.log(servedAccidents);\n\n    return servedAccidents;\n  };\n\n  getAllUnServedAccidents = () => {};\n\n  render() {\n    const accidents = this.state.accidents;\n\n    return (\n      <div className=\"App\">\n        <nav>Post Crash Help</nav>\n        <main>\n          <div className=\"listTitle\">All accidents</div>\n          <RecordList accidents={this.getAllServedAccidents()} />\n        </main>\n        {/* <AlertPopup /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}