{"ast":null,"code":"var _jsxFileName = \"/Users/mdhasan/Desktop/md/post_crash_help/mongo_db/client/src/components/content-holder.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getAccidents, updateAccident } from \"../actions/accidentActions\";\nimport { getUsers } from \"../actions/userActions\";\nimport { getAmbulances } from \"../actions/ambulanceActions\";\nimport PropTypes from \"prop-types\";\nimport RecordList from \"./record-list/record-list\";\nimport AlertPopup from \"./accident-alert/alert-popup\";\nimport NotificationCenter from \"../components/notification-center/notification-center\";\n\nclass ContentHolder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      accident: {\n        accidents: []\n      },\n      user: {},\n      ambulance: {},\n      clickedAccident: {}\n    };\n\n    this.componentWillMount = async () => {\n      await this.props.getAccidents();\n      await this.props.getUsers();\n      await this.props.getAmbulances();\n    };\n\n    this.getServedAccidents = (serve, accidents, users) => {\n      if (accidents.length) {\n        accidents = accidents.filter(accident => accident.serve === serve);\n        let allAccidents = [];\n        accidents.map(accident => {\n          return users.map(user => {\n            if (user.vehicle_id === accident.vehicle_id) {\n              let formatedAccident = {};\n              formatedAccident.id = accident._id;\n              formatedAccident.patientName = user.name;\n              formatedAccident.descript = [{\n                key: 0,\n                title: \"Vehicle no.\",\n                text: accident.vehicle_id\n              }, {\n                key: 1,\n                title: \"Medical condition\",\n                text: user.medical_condition\n              }, {\n                key: 2,\n                title: \"Blood Group\",\n                text: user.blood_grp\n              }, {\n                key: 3,\n                title: \"Location\",\n                text: \"Open Google Map\",\n                coordinates: accident.latitude + \", \" + accident.longitude\n              }];\n              allAccidents.push(formatedAccident);\n            }\n          });\n        });\n        return allAccidents;\n      }\n\n      return [];\n    };\n\n    this.getUnServedAccidents = (serve, accidents, users) => {\n      if (accidents.length) {\n        accidents = accidents.filter(accident => accident.serve === serve);\n        let allAccidents = [];\n        accidents.map(accident => {\n          return users.map(user => {\n            if (user.vehicle_id === accident.vehicle_id) {\n              let formatedAccident = {};\n              formatedAccident.id = accident._id;\n              formatedAccident.patientName = user.name;\n              formatedAccident.vehicle_no = user.vehicle_id;\n              formatedAccident.location = \"Location(\" + accident.latitude + \", \" + accident.longitude + \")\";\n              formatedAccident.lat = parseFloat(accident.latitude);\n              formatedAccident.lng = parseFloat(accident.longitude);\n              allAccidents.push(formatedAccident);\n            }\n          });\n        });\n        return allAccidents;\n      }\n\n      return [];\n    };\n\n    this.getFormatedAmbulance = ambulances => {\n      if (ambulances.length) {}\n\n      return [];\n    };\n\n    this.handleNotificationItemClick = clickAccident => {\n      console.log(clickAccident);\n      this.setState({\n        clickedAccident: clickAccident\n      });\n    };\n\n    this.handleAlertBoxClose = () => {\n      this.setState({\n        clickedAccident: {}\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"main\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"listTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"All accidents\"), React.createElement(RecordList, {\n      accidents: this.getServedAccidents(true, this.props.accident.accidents, this.props.user.users),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    })), React.createElement(NotificationCenter, {\n      accidents: this.getUnServedAccidents(false, this.props.accident.accidents, this.props.user.users),\n      handleItemClick: this.handleNotificationItemClick,\n      handleServedBtnClick: this.handleServedBtnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), Object.entries(this.state.clickedAccident).length === 0 ? null : React.createElement(AlertPopup, {\n      accident: this.state.clickedAccident,\n      ambulances: this.getFormatedAmbulance(this.props.ambulance.ambulances),\n      handleAlertBoxClose: this.handleAlertBoxClose,\n      handleServedBtnClick: this.handleServedBtnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }));\n  }\n\n}\n\nContentHolder.propTypes = {\n  getAccidents: PropTypes.func.isRequired,\n  accident: PropTypes.object.isRequired,\n  user: PropTypes.object.isRequired,\n  ambulance: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  accident: state.accident,\n  user: state.user,\n  ambulance: state.ambulance\n});\n\nexport default connect(mapStateToProps, {\n  getAccidents,\n  updateAccident,\n  getUsers,\n  getAmbulances\n})(ContentHolder);","map":{"version":3,"sources":["/Users/mdhasan/Desktop/md/post_crash_help/mongo_db/client/src/components/content-holder.jsx"],"names":["React","Component","connect","getAccidents","updateAccident","getUsers","getAmbulances","PropTypes","RecordList","AlertPopup","NotificationCenter","ContentHolder","state","accident","accidents","user","ambulance","clickedAccident","componentWillMount","props","getServedAccidents","serve","users","length","filter","allAccidents","map","vehicle_id","formatedAccident","id","_id","patientName","name","descript","key","title","text","medical_condition","blood_grp","coordinates","latitude","longitude","push","getUnServedAccidents","vehicle_no","location","lat","parseFloat","lng","getFormatedAmbulance","ambulances","handleNotificationItemClick","clickAccident","console","log","setState","handleAlertBoxClose","render","handleServedBtnClick","Object","entries","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { getAccidents, updateAccident } from \"../actions/accidentActions\";\nimport { getUsers } from \"../actions/userActions\";\nimport { getAmbulances } from \"../actions/ambulanceActions\";\nimport PropTypes from \"prop-types\";\n\nimport RecordList from \"./record-list/record-list\";\nimport AlertPopup from \"./accident-alert/alert-popup\";\nimport NotificationCenter from \"../components/notification-center/notification-center\";\n\nclass ContentHolder extends Component {\n  state = {\n    accident: {\n      accidents: []\n    },\n    user: {},\n    ambulance: {},\n    clickedAccident: {}\n  };\n\n  componentWillMount = async () => {\n    await this.props.getAccidents();\n    await this.props.getUsers();\n    await this.props.getAmbulances();\n  };\n\n  getServedAccidents = (serve, accidents, users) => {\n    if (accidents.length) {\n      accidents = accidents.filter(accident => accident.serve === serve);\n\n      let allAccidents = [];\n      accidents.map(accident => {\n        return users.map(user => {\n          if (user.vehicle_id === accident.vehicle_id) {\n            let formatedAccident = {};\n            formatedAccident.id = accident._id;\n            formatedAccident.patientName = user.name;\n            formatedAccident.descript = [\n              {\n                key: 0,\n                title: \"Vehicle no.\",\n                text: accident.vehicle_id\n              },\n              {\n                key: 1,\n                title: \"Medical condition\",\n                text: user.medical_condition\n              },\n              {\n                key: 2,\n                title: \"Blood Group\",\n                text: user.blood_grp\n              },\n              {\n                key: 3,\n                title: \"Location\",\n                text: \"Open Google Map\",\n                coordinates: accident.latitude + \", \" + accident.longitude\n              }\n            ];\n            allAccidents.push(formatedAccident);\n          }\n        });\n      });\n      return allAccidents;\n    }\n    return [];\n  };\n\n  getUnServedAccidents = (serve, accidents, users) => {\n    if (accidents.length) {\n      accidents = accidents.filter(accident => accident.serve === serve);\n\n      let allAccidents = [];\n      accidents.map(accident => {\n        return users.map(user => {\n          if (user.vehicle_id === accident.vehicle_id) {\n            let formatedAccident = {};\n\n            formatedAccident.id = accident._id;\n            formatedAccident.patientName = user.name;\n            formatedAccident.vehicle_no = user.vehicle_id;\n            formatedAccident.location =\n              \"Location(\" + accident.latitude + \", \" + accident.longitude + \")\";\n            formatedAccident.lat = parseFloat(accident.latitude);\n            formatedAccident.lng = parseFloat(accident.longitude);\n\n            allAccidents.push(formatedAccident);\n          }\n        });\n      });\n      return allAccidents;\n    }\n    return [];\n  };\n\n  getFormatedAmbulance = ambulances => {\n    if (ambulances.length) {\n      \n    }\n\n    return [];\n  };\n\n  handleNotificationItemClick = clickAccident => {\n    console.log(clickAccident);\n    this.setState({ clickedAccident: clickAccident });\n  };\n\n  handleAlertBoxClose = () => {\n    this.setState({\n      clickedAccident: {}\n    });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <main>\n          <div className=\"listTitle\">All accidents</div>\n          <RecordList\n            accidents={this.getServedAccidents(\n              true,\n              this.props.accident.accidents,\n              this.props.user.users\n            )}\n          />\n        </main>\n\n        <NotificationCenter\n          accidents={this.getUnServedAccidents(\n            false,\n            this.props.accident.accidents,\n            this.props.user.users\n          )}\n          handleItemClick={this.handleNotificationItemClick}\n          handleServedBtnClick={this.handleServedBtnClick}\n        />\n\n        {Object.entries(this.state.clickedAccident).length === 0 ? null : (\n          <AlertPopup\n            accident={this.state.clickedAccident}\n            ambulances={this.getFormatedAmbulance(\n              this.props.ambulance.ambulances\n            )}\n            handleAlertBoxClose={this.handleAlertBoxClose}\n            handleServedBtnClick={this.handleServedBtnClick}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nContentHolder.propTypes = {\n  getAccidents: PropTypes.func.isRequired,\n  accident: PropTypes.object.isRequired,\n  user: PropTypes.object.isRequired,\n  ambulance: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  accident: state.accident,\n  user: state.user,\n  ambulance: state.ambulance\n});\n\nexport default connect(mapStateToProps, {\n  getAccidents,\n  updateAccident,\n  getUsers,\n  getAmbulances\n})(ContentHolder);\n"]},"metadata":{},"sourceType":"module"}