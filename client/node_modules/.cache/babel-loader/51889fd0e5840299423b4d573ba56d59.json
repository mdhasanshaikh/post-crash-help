{"ast":null,"code":"var _jsxFileName = \"/Users/mdhasan/Desktop/md/post_crash_help/mongo_db/client/src/components/content-holder.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getAccidents, updateAccident } from \"../actions/accidentActions\";\nimport { getUsers } from \"../actions/userActions\";\nimport { getAmbulances } from \"../actions/ambulanceActions\";\nimport PropTypes from \"prop-types\";\nimport RecordList from \"./record-list\";\nimport AlertPopup from \"./alert-popup\";\nimport NotificationCenter from \"../components/notification-center/notification-center\";\n\nclass ContentHolder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      accident: [],\n      user: [],\n      clickedAccident: {}\n    };\n\n    this.getAllServedAccidents = _ => {\n      let allAccidents = this.state.accident;\n\n      if (allAccidents.length) {\n        allAccidents = allAccidents.filter(accident => accident.served === 1);\n        allAccidents = allAccidents.sort((a, b) => a.date < b.date ? 1 : -1);\n        let servedAccidents = allAccidents.map(accident => {\n          let formatedAccident = {};\n          formatedAccident.id = accident.id;\n          formatedAccident.patientName = accident.name;\n          formatedAccident.date = accident.date;\n          formatedAccident.descript = [{\n            key: 0,\n            title: \"License no.\",\n            text: accident.license_no\n          }, {\n            key: 1,\n            title: \"Medical condition\",\n            text: accident.medical_cond\n          }, {\n            key: 2,\n            title: \"Location\",\n            text: accident.location\n          }];\n          return formatedAccident;\n        });\n        return servedAccidents;\n      }\n\n      return {};\n    };\n\n    this.getAllUnServedAccidents = _ => {\n      let allAccidents = this.state.accident;\n      allAccidents = allAccidents.filter(accident => accident.served === 0);\n      allAccidents = allAccidents.sort((a, b) => a.date < b.date ? 1 : -1);\n      let servedAccidents = allAccidents.map(accident => {\n        let formatedAccident = {};\n        formatedAccident.id = accident.id;\n        formatedAccident.patientName = accident.name;\n        formatedAccident.date = accident.date;\n        formatedAccident.license_no = accident.license_no;\n        formatedAccident.location = accident.location;\n        return formatedAccident;\n      });\n      return servedAccidents;\n    };\n  }\n\n  componentDidMount() {\n    this.props.getAccidents();\n    this.props.getUsers();\n    this.props.getAmbulances();\n    console.log(this.props.accident);\n    console.log(this.props.user);\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"main\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"listTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"All accidents\"), React.createElement(RecordList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    })), React.createElement(NotificationCenter, {\n      accidents: this.getAllUnServedAccidents(),\n      handleNotificationItemClick: this.handleNotificationItemClick,\n      handleServedBtnClick: this.handleServedBtnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), Object.entries(this.state.clickedAccident).length === 0 ? null : React.createElement(AlertPopup, {\n      accident: this.state.clickedAccident,\n      handleAlertBoxClose: this.handleAlertBoxClose,\n      handleServedBtnClick: this.handleServedBtnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }));\n  }\n\n}\n\nContentHolder.propTypes = {\n  getAccidents: PropTypes.func.isRequired,\n  accident: PropTypes.object.isRequired,\n  user: PropTypes.object.isRequired,\n  ambulance: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  accident: state.accident,\n  user: state.user,\n  ambulance: state.ambulance\n});\n\nexport default connect(mapStateToProps, {\n  getAccidents,\n  updateAccident,\n  getUsers,\n  getAmbulances\n})(ContentHolder);","map":{"version":3,"sources":["/Users/mdhasan/Desktop/md/post_crash_help/mongo_db/client/src/components/content-holder.jsx"],"names":["React","Component","connect","getAccidents","updateAccident","getUsers","getAmbulances","PropTypes","RecordList","AlertPopup","NotificationCenter","ContentHolder","state","accident","user","clickedAccident","getAllServedAccidents","_","allAccidents","length","filter","served","sort","a","b","date","servedAccidents","map","formatedAccident","id","patientName","name","descript","key","title","text","license_no","medical_cond","location","getAllUnServedAccidents","componentDidMount","props","console","log","render","handleNotificationItemClick","handleServedBtnClick","Object","entries","handleAlertBoxClose","propTypes","func","isRequired","object","ambulance","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { getAccidents, updateAccident } from \"../actions/accidentActions\";\nimport { getUsers } from \"../actions/userActions\";\nimport { getAmbulances } from \"../actions/ambulanceActions\";\nimport PropTypes from \"prop-types\";\n\nimport RecordList from \"./record-list\";\nimport AlertPopup from \"./alert-popup\";\nimport NotificationCenter from \"../components/notification-center/notification-center\";\n\nclass ContentHolder extends Component {\n  state = {\n    accident: [],\n    user:[],\n    clickedAccident: {}\n  };\n\n  componentDidMount() {\n    this.props.getAccidents();\n    this.props.getUsers();\n    this.props.getAmbulances();\n\n    console.log(this.props.accident);\n    console.log(this.props.user);\n  }\n\n  getAllServedAccidents = _ => {\n    let allAccidents = this.state.accident;\n\n    if (allAccidents.length) {\n      allAccidents = allAccidents.filter(accident => accident.served === 1);\n      allAccidents = allAccidents.sort((a, b) => (a.date < b.date ? 1 : -1));\n\n      let servedAccidents = allAccidents.map(accident => {\n        let formatedAccident = {};\n\n        formatedAccident.id = accident.id;\n        formatedAccident.patientName = accident.name;\n        formatedAccident.date = accident.date;\n\n        formatedAccident.descript = [\n          {\n            key: 0,\n            title: \"License no.\",\n            text: accident.license_no\n          },\n          {\n            key: 1,\n            title: \"Medical condition\",\n            text: accident.medical_cond\n          },\n          {\n            key: 2,\n            title: \"Location\",\n            text: accident.location\n          }\n        ];\n        return formatedAccident;\n      });\n      return servedAccidents;\n    }\n\n    return {};\n  };\n\n  getAllUnServedAccidents = _ => {\n    let allAccidents = this.state.accident;\n\n    allAccidents = allAccidents.filter(accident => accident.served === 0);\n    allAccidents = allAccidents.sort((a, b) => (a.date < b.date ? 1 : -1));\n\n    let servedAccidents = allAccidents.map(accident => {\n      let formatedAccident = {};\n\n      formatedAccident.id = accident.id;\n      formatedAccident.patientName = accident.name;\n      formatedAccident.date = accident.date;\n      formatedAccident.license_no = accident.license_no;\n      formatedAccident.location = accident.location;\n\n      return formatedAccident;\n    });\n\n    return servedAccidents;\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <main>\n          <div className=\"listTitle\">All accidents</div>\n          <RecordList />\n          {/* <RecordList accidents={this.getAllServedAccidents()} /> */}\n        </main>\n\n        <NotificationCenter\n          accidents={this.getAllUnServedAccidents()}\n          handleNotificationItemClick={this.handleNotificationItemClick}\n          handleServedBtnClick={this.handleServedBtnClick}\n        />\n\n        {Object.entries(this.state.clickedAccident).length === 0 ? null : (\n          <AlertPopup\n            accident={this.state.clickedAccident}\n            handleAlertBoxClose={this.handleAlertBoxClose}\n            handleServedBtnClick={this.handleServedBtnClick}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nContentHolder.propTypes = {\n  getAccidents: PropTypes.func.isRequired,\n  accident: PropTypes.object.isRequired,\n  user: PropTypes.object.isRequired,\n  ambulance: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  accident: state.accident,\n  user: state.user,\n  ambulance: state.ambulance\n});\n\nexport default connect(mapStateToProps, {\n  getAccidents,\n  updateAccident,\n  getUsers,\n  getAmbulances\n})(ContentHolder);\n"]},"metadata":{},"sourceType":"module"}