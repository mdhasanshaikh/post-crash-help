{"ast":null,"code":"var _jsxFileName = \"/Users/mdhasan/Desktop/md/post_crash_help/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport RecordList from \"./components/record-list\";\nimport AlertPopup from \"./components/alert-popup\";\nimport NotificationCenter from \"./components/notification-center/notification-center\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      accidents: [],\n      inputField: [{\n        id: 1,\n        name: \"Accident id\",\n        value: 0\n      }, {\n        id: 2,\n        name: \"Served\",\n        value: 0\n      }],\n      clickedAccident: {}\n    };\n\n    this.getAllAccidents = _ => {\n      // const scope = this;\n      fetch(\"http://localhost:4000/accidents\").then(res => res.json()).then(res => this.setState({\n        accidents: res.data\n      })).catch(err => console.log(err));\n    };\n\n    this.getAllServedAccidents = _ => {\n      let allAccidents = this.state.accidents;\n      allAccidents = allAccidents.filter(accident => accident.served === 1);\n      let servedAccidents = allAccidents.map(accident => {\n        let formatedAccident = {};\n        formatedAccident.id = accident.id;\n        formatedAccident.patientName = accident.name;\n        formatedAccident.date = accident.date;\n        formatedAccident.descript = [{\n          key: 0,\n          title: \"License no.\",\n          text: accident.license_no\n        }, {\n          key: 1,\n          title: \"Medical condition\",\n          text: accident.medical_cond\n        }, {\n          key: 2,\n          title: \"Location\",\n          text: accident.location\n        }];\n        return formatedAccident;\n      });\n      return servedAccidents;\n    };\n\n    this.getAllUnServedAccidents = _ => {\n      let allAccidents = this.state.accidents;\n      allAccidents = allAccidents.filter(accident => accident.served === 0);\n      let servedAccidents = allAccidents.map(accident => {\n        let formatedAccident = {};\n        formatedAccident.id = accident.id;\n        formatedAccident.patientName = accident.name;\n        formatedAccident.date = accident.date;\n        formatedAccident.license_no = accident.license_no;\n        formatedAccident.location = accident.location;\n        return formatedAccident;\n      });\n      return servedAccidents;\n    };\n\n    this.handleInputValueChange = env => {\n      let inputField = this.state.inputField;\n      inputField.map(field => {\n        if (field.name === env.target.name) {\n          field.value = env.target.value;\n        }\n\n        return field;\n      });\n      this.setState({\n        inputField\n      });\n    };\n\n    this.handleServedBtnClick = ac => {\n      const inputField = this.state.inputField;\n      fetch(`http://localhost:4000/accidents/update?accident_id=\"${inputField[0].value}\"&status=${inputField[1].value}`).then(this.getAllAccidents).catch(err => console.log(err));\n      const clickedAccident = this.state.clickedAccident;\n\n      if (Object.entries(clickedAccident).length !== 0) {\n        this.setState({\n          clickedAccident: {}\n        });\n      }\n    };\n\n    this.handleNotificationItemClick = clickAccident => {\n      this.setState({\n        clickedAccident: clickAccident\n      });\n    };\n\n    this.handleAlertBoxClose = () => {\n      this.setState({\n        clickedAccident: {}\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getAllAccidents();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Post Crash Help\"), React.createElement(\"main\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"listTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"All accidents\"), React.createElement(RecordList, {\n      accidents: this.getAllServedAccidents(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    })), React.createElement(NotificationCenter, {\n      accidents: this.getAllUnServedAccidents(),\n      handleNotificationItemClick: this.handleNotificationItemClick,\n      handleServedBtnClick: this.handleServedBtnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), Object.entries(this.state.clickedAccident).length === 0 ? null : React.createElement(AlertPopup, {\n      accident: this.state.clickedAccident,\n      handleAlertBoxClose: this.handleAlertBoxClose,\n      handleServedBtnClick: this.handleServedBtnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/mdhasan/Desktop/md/post_crash_help/client/src/App.js"],"names":["React","Component","RecordList","AlertPopup","NotificationCenter","App","state","accidents","inputField","id","name","value","clickedAccident","getAllAccidents","_","fetch","then","res","json","setState","data","catch","err","console","log","getAllServedAccidents","allAccidents","filter","accident","served","servedAccidents","map","formatedAccident","patientName","date","descript","key","title","text","license_no","medical_cond","location","getAllUnServedAccidents","handleInputValueChange","env","field","target","handleServedBtnClick","ac","Object","entries","length","handleNotificationItemClick","clickAccident","handleAlertBoxClose","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport RecordList from \"./components/record-list\";\nimport AlertPopup from \"./components/alert-popup\";\nimport NotificationCenter from \"./components/notification-center/notification-center\";\n\nclass App extends Component {\n  state = {\n    accidents: [],\n    inputField: [\n      { id: 1, name: \"Accident id\", value: 0 },\n      { id: 2, name: \"Served\", value: 0 }\n    ],\n    clickedAccident: {}\n  };\n\n  componentDidMount() {\n    this.getAllAccidents();\n  }\n\n  getAllAccidents = _ => {\n    // const scope = this;\n\n    fetch(\"http://localhost:4000/accidents\")\n      .then(res => res.json())\n      .then(res => this.setState({ accidents: res.data }))\n      .catch(err => console.log(err));\n  };\n\n  getAllServedAccidents = _ => {\n    let allAccidents = this.state.accidents;\n\n    allAccidents = allAccidents.filter(accident => accident.served === 1);\n    let servedAccidents = allAccidents.map(accident => {\n      let formatedAccident = {};\n\n      formatedAccident.id = accident.id;\n      formatedAccident.patientName = accident.name;\n      formatedAccident.date = accident.date;\n\n      formatedAccident.descript = [\n        {\n          key: 0,\n          title: \"License no.\",\n          text: accident.license_no\n        },\n        {\n          key: 1,\n          title: \"Medical condition\",\n          text: accident.medical_cond\n        },\n        {\n          key: 2,\n          title: \"Location\",\n          text: accident.location\n        }\n      ];\n      return formatedAccident;\n    });\n\n    return servedAccidents;\n  };\n\n  getAllUnServedAccidents = _ => {\n    let allAccidents = this.state.accidents;\n\n    allAccidents = allAccidents.filter(accident => accident.served === 0);\n\n    let servedAccidents = allAccidents.map(accident => {\n      let formatedAccident = {};\n\n      formatedAccident.id = accident.id;\n      formatedAccident.patientName = accident.name;\n      formatedAccident.date = accident.date;\n      formatedAccident.license_no = accident.license_no;\n      formatedAccident.location = accident.location;\n\n      return formatedAccident;\n    });\n\n    return servedAccidents;\n  };\n\n  handleInputValueChange = env => {\n    let inputField = this.state.inputField;\n    inputField.map(field => {\n      if (field.name === env.target.name) {\n        field.value = env.target.value;\n      }\n      return field;\n    });\n\n    this.setState({\n      inputField\n    });\n  };\n\n  handleServedBtnClick = (ac) => {\n    const inputField = this.state.inputField;\n    fetch(\n      `http://localhost:4000/accidents/update?accident_id=\"${inputField[0].value}\"&status=${inputField[1].value}`\n    )\n      .then(this.getAllAccidents)\n      .catch(err => console.log(err));\n\n    const clickedAccident = this.state.clickedAccident;\n\n    if (Object.entries(clickedAccident).length !== 0) {\n      this.setState({\n        clickedAccident: {}\n      });\n    }\n  };\n\n  handleNotificationItemClick = clickAccident => {\n    this.setState({ clickedAccident: clickAccident });\n  };\n\n  handleAlertBoxClose = () => {\n    this.setState({\n      clickedAccident: {}\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <nav>Post Crash Help</nav>\n        <main>\n          <div className=\"listTitle\">All accidents</div>\n          <RecordList accidents={this.getAllServedAccidents()} />\n        </main>\n\n        <NotificationCenter\n          accidents={this.getAllUnServedAccidents()}\n          handleNotificationItemClick={this.handleNotificationItemClick}\n          handleServedBtnClick={this.handleServedBtnClick}\n        />\n        {Object.entries(this.state.clickedAccident).length === 0 ? null : (\n          <AlertPopup\n            accident={this.state.clickedAccident}\n            handleAlertBoxClose={this.handleAlertBoxClose}\n            handleServedBtnClick={this.handleServedBtnClick}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}