{"ast":null,"code":"var _jsxFileName = \"/Users/mdhasan/Desktop/md/post_crash_help/mongo_db/client/src/components/content-holder.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getAccidents, updateAccident } from \"./actions/accidentActions\";\nimport { getUsers } from \"./actions/userActions\";\nimport { getAmbulances } from \"./actions/ambulanceActions\";\nimport PropTypes from \"prop-types\";\n\nclass ContentHolder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n\n    this.getAllServedAccidents = _ => {\n      let allAccidents = this.state.accidents;\n      allAccidents = allAccidents.filter(accident => accident.served === 1);\n      allAccidents = allAccidents.sort((a, b) => a.date < b.date ? 1 : -1);\n      let servedAccidents = allAccidents.map(accident => {\n        let formatedAccident = {};\n        formatedAccident.id = accident.id;\n        formatedAccident.patientName = accident.name;\n        formatedAccident.date = accident.date;\n        formatedAccident.descript = [{\n          key: 0,\n          title: \"License no.\",\n          text: accident.license_no\n        }, {\n          key: 1,\n          title: \"Medical condition\",\n          text: accident.medical_cond\n        }, {\n          key: 2,\n          title: \"Location\",\n          text: accident.location\n        }];\n        return formatedAccident;\n      });\n      return servedAccidents;\n    };\n\n    this.getAllUnServedAccidents = _ => {\n      let allAccidents = this.state.accidents;\n      allAccidents = allAccidents.filter(accident => accident.served === 0);\n      allAccidents = allAccidents.sort((a, b) => a.date < b.date ? 1 : -1);\n      let servedAccidents = allAccidents.map(accident => {\n        let formatedAccident = {};\n        formatedAccident.id = accident.id;\n        formatedAccident.patientName = accident.name;\n        formatedAccident.date = accident.date;\n        formatedAccident.license_no = accident.license_no;\n        formatedAccident.location = accident.location;\n        return formatedAccident;\n      });\n      return servedAccidents;\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"main\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"listTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"All accidents\"), React.createElement(RecordList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })), React.createElement(NotificationCenter, {\n      accidents: this.getAllUnServedAccidents(),\n      handleNotificationItemClick: this.handleNotificationItemClick,\n      handleServedBtnClick: this.handleServedBtnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), Object.entries(this.state.clickedAccident).length === 0 ? null : React.createElement(AlertPopup, {\n      accident: this.state.clickedAccident,\n      handleAlertBoxClose: this.handleAlertBoxClose,\n      handleServedBtnClick: this.handleServedBtnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }));\n  }\n\n}\n\nContentHolder.propTypes = {\n  getAccidents: PropTypes.func.isRequired,\n  accident: PropTypes.object.isRequired,\n  user: PropTypes.object.isRequired,\n  ambulance: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  accident: state.accident,\n  user: state.user,\n  ambulance: state.ambulance\n});\n\nexport default connect(mapStateToProps, {\n  getAccidents,\n  updateAccident,\n  getUsers,\n  getAmbulances\n})(App);","map":{"version":3,"sources":["/Users/mdhasan/Desktop/md/post_crash_help/mongo_db/client/src/components/content-holder.jsx"],"names":["React","Component","connect","getAccidents","updateAccident","getUsers","getAmbulances","PropTypes","ContentHolder","state","getAllServedAccidents","_","allAccidents","accidents","filter","accident","served","sort","a","b","date","servedAccidents","map","formatedAccident","id","patientName","name","descript","key","title","text","license_no","medical_cond","location","getAllUnServedAccidents","render","handleNotificationItemClick","handleServedBtnClick","Object","entries","clickedAccident","length","handleAlertBoxClose","propTypes","func","isRequired","object","user","ambulance","mapStateToProps","App"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { getAccidents, updateAccident } from \"./actions/accidentActions\";\nimport { getUsers } from \"./actions/userActions\";\nimport { getAmbulances } from \"./actions/ambulanceActions\";\nimport PropTypes from \"prop-types\";\n\nclass ContentHolder extends Component {\n  state = {};\n\n  getAllServedAccidents = _ => {\n    let allAccidents = this.state.accidents;\n\n    allAccidents = allAccidents.filter(accident => accident.served === 1);\n    allAccidents = allAccidents.sort((a, b) => (a.date < b.date ? 1 : -1));\n\n    let servedAccidents = allAccidents.map(accident => {\n      let formatedAccident = {};\n\n      formatedAccident.id = accident.id;\n      formatedAccident.patientName = accident.name;\n      formatedAccident.date = accident.date;\n\n      formatedAccident.descript = [\n        {\n          key: 0,\n          title: \"License no.\",\n          text: accident.license_no\n        },\n        {\n          key: 1,\n          title: \"Medical condition\",\n          text: accident.medical_cond\n        },\n        {\n          key: 2,\n          title: \"Location\",\n          text: accident.location\n        }\n      ];\n      return formatedAccident;\n    });\n\n    return servedAccidents;\n  };\n\n  getAllUnServedAccidents = _ => {\n    let allAccidents = this.state.accidents;\n\n    allAccidents = allAccidents.filter(accident => accident.served === 0);\n    allAccidents = allAccidents.sort((a, b) => (a.date < b.date ? 1 : -1));\n\n    let servedAccidents = allAccidents.map(accident => {\n      let formatedAccident = {};\n\n      formatedAccident.id = accident.id;\n      formatedAccident.patientName = accident.name;\n      formatedAccident.date = accident.date;\n      formatedAccident.license_no = accident.license_no;\n      formatedAccident.location = accident.location;\n\n      return formatedAccident;\n    });\n\n    return servedAccidents;\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <main>\n          <div className=\"listTitle\">All accidents</div>\n          <RecordList />\n          {/* <RecordList accidents={this.getAllServedAccidents()} /> */}\n        </main>\n\n        <NotificationCenter\n          accidents={this.getAllUnServedAccidents()}\n          handleNotificationItemClick={this.handleNotificationItemClick}\n          handleServedBtnClick={this.handleServedBtnClick}\n        />\n        {Object.entries(this.state.clickedAccident).length === 0 ? null : (\n          <AlertPopup\n            accident={this.state.clickedAccident}\n            handleAlertBoxClose={this.handleAlertBoxClose}\n            handleServedBtnClick={this.handleServedBtnClick}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nContentHolder.propTypes = {\n  getAccidents: PropTypes.func.isRequired,\n  accident: PropTypes.object.isRequired,\n  user: PropTypes.object.isRequired,\n  ambulance: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  accident: state.accident,\n  user: state.user,\n  ambulance: state.ambulance\n});\n\nexport default connect(mapStateToProps, {\n  getAccidents,\n  updateAccident,\n  getUsers,\n  getAmbulances\n})(App);\n"]},"metadata":{},"sourceType":"module"}