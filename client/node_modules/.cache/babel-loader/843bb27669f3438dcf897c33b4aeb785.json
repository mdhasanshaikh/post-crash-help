{"ast":null,"code":"var _jsxFileName = \"/Users/mdhasan/Desktop/md/post_crash_help/mongo_db/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport RecordList from \"./components/record-list\";\nimport AlertPopup from \"./components/alert-popup\";\nimport NotificationCenter from \"./components/notification-center/notification-center\";\nimport { Provider } from \"reac\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      accidents: [],\n      inputField: [{\n        id: 1,\n        name: \"Accident id\",\n        value: 0\n      }, {\n        id: 2,\n        name: \"Served\",\n        value: 0\n      }],\n      clickedAccident: {}\n    };\n\n    this.getAllAccidents = _ => {};\n\n    this.getAllServedAccidents = _ => {\n      let allAccidents = this.state.accidents;\n      allAccidents = allAccidents.filter(accident => accident.served === 1);\n      allAccidents = allAccidents.sort((a, b) => a.date < b.date ? 1 : -1);\n      let servedAccidents = allAccidents.map(accident => {\n        let formatedAccident = {};\n        formatedAccident.id = accident.id;\n        formatedAccident.patientName = accident.name;\n        formatedAccident.date = accident.date;\n        formatedAccident.descript = [{\n          key: 0,\n          title: \"License no.\",\n          text: accident.license_no\n        }, {\n          key: 1,\n          title: \"Medical condition\",\n          text: accident.medical_cond\n        }, {\n          key: 2,\n          title: \"Location\",\n          text: accident.location\n        }];\n        return formatedAccident;\n      });\n      return servedAccidents;\n    };\n\n    this.getAllUnServedAccidents = _ => {\n      let allAccidents = this.state.accidents;\n      allAccidents = allAccidents.filter(accident => accident.served === 0);\n      allAccidents = allAccidents.sort((a, b) => a.date < b.date ? 1 : -1);\n      let servedAccidents = allAccidents.map(accident => {\n        let formatedAccident = {};\n        formatedAccident.id = accident.id;\n        formatedAccident.patientName = accident.name;\n        formatedAccident.date = accident.date;\n        formatedAccident.license_no = accident.license_no;\n        formatedAccident.location = accident.location;\n        return formatedAccident;\n      });\n      return servedAccidents;\n    };\n\n    this.handleInputValueChange = env => {\n      let inputField = this.state.inputField;\n      inputField.map(field => {\n        if (field.name === env.target.name) {\n          field.value = env.target.value;\n        }\n\n        return field;\n      });\n      this.setState({\n        inputField\n      });\n    };\n\n    this.handleServedBtnClick = accident_id => {\n      fetch(`http://localhost:4000/accidents/update?accident_id=\"${accident_id}\"&status=${1}`).then(this.getAllAccidents).catch(err => console.log(err));\n      const clickedAccident = this.state.clickedAccident;\n\n      if (Object.entries(clickedAccident).length !== 0) {\n        this.setState({\n          clickedAccident: {}\n        });\n      }\n    };\n\n    this.handleNotificationItemClick = clickAccident => {\n      this.setState({\n        clickedAccident: clickAccident\n      });\n    };\n\n    this.handleAlertBoxClose = () => {\n      this.setState({\n        clickedAccident: {}\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getAllAccidents();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Post Crash Help\"), React.createElement(\"main\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"listTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"All accidents\"), React.createElement(RecordList, {\n      accidents: this.getAllServedAccidents(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    })), React.createElement(NotificationCenter, {\n      accidents: this.getAllUnServedAccidents(),\n      handleNotificationItemClick: this.handleNotificationItemClick,\n      handleServedBtnClick: this.handleServedBtnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), Object.entries(this.state.clickedAccident).length === 0 ? null : React.createElement(AlertPopup, {\n      accident: this.state.clickedAccident,\n      handleAlertBoxClose: this.handleAlertBoxClose,\n      handleServedBtnClick: this.handleServedBtnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/mdhasan/Desktop/md/post_crash_help/mongo_db/client/src/App.js"],"names":["React","Component","RecordList","AlertPopup","NotificationCenter","Provider","App","state","accidents","inputField","id","name","value","clickedAccident","getAllAccidents","_","getAllServedAccidents","allAccidents","filter","accident","served","sort","a","b","date","servedAccidents","map","formatedAccident","patientName","descript","key","title","text","license_no","medical_cond","location","getAllUnServedAccidents","handleInputValueChange","env","field","target","setState","handleServedBtnClick","accident_id","fetch","then","catch","err","console","log","Object","entries","length","handleNotificationItemClick","clickAccident","handleAlertBoxClose","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport RecordList from \"./components/record-list\";\nimport AlertPopup from \"./components/alert-popup\";\nimport NotificationCenter from \"./components/notification-center/notification-center\";\n\nimport {Provider} from \"reac\"\n\nclass App extends Component {\n  state = {\n    accidents: [],\n    inputField: [\n      { id: 1, name: \"Accident id\", value: 0 },\n      { id: 2, name: \"Served\", value: 0 }\n    ],\n    clickedAccident: {}\n  };\n\n  componentDidMount() {\n    this.getAllAccidents();\n  }\n\n  getAllAccidents = _ => {\n  };\n\n  getAllServedAccidents = _ => {\n    let allAccidents = this.state.accidents;\n\n    allAccidents = allAccidents.filter(accident => accident.served === 1);\n    allAccidents = allAccidents.sort((a, b) => (a.date < b.date ? 1 : -1));\n\n    let servedAccidents = allAccidents.map(accident => {\n      let formatedAccident = {};\n\n      formatedAccident.id = accident.id;\n      formatedAccident.patientName = accident.name;\n      formatedAccident.date = accident.date;\n\n      formatedAccident.descript = [\n        {\n          key: 0,\n          title: \"License no.\",\n          text: accident.license_no\n        },\n        {\n          key: 1,\n          title: \"Medical condition\",\n          text: accident.medical_cond\n        },\n        {\n          key: 2,\n          title: \"Location\",\n          text: accident.location\n        }\n      ];\n      return formatedAccident;\n    });\n\n    return servedAccidents;\n  };\n\n  getAllUnServedAccidents = _ => {\n    let allAccidents = this.state.accidents;\n\n    allAccidents = allAccidents.filter(accident => accident.served === 0);\n    allAccidents = allAccidents.sort((a, b) => (a.date < b.date ? 1 : -1));\n\n    let servedAccidents = allAccidents.map(accident => {\n      let formatedAccident = {};\n\n      formatedAccident.id = accident.id;\n      formatedAccident.patientName = accident.name;\n      formatedAccident.date = accident.date;\n      formatedAccident.license_no = accident.license_no;\n      formatedAccident.location = accident.location;\n\n      return formatedAccident;\n    });\n\n    return servedAccidents;\n  };\n\n  handleInputValueChange = env => {\n    let inputField = this.state.inputField;\n    inputField.map(field => {\n      if (field.name === env.target.name) {\n        field.value = env.target.value;\n      }\n      return field;\n    });\n\n    this.setState({\n      inputField\n    });\n  };\n\n  handleServedBtnClick = accident_id => {\n    fetch(\n      `http://localhost:4000/accidents/update?accident_id=\"${accident_id}\"&status=${1}`\n    )\n      .then(this.getAllAccidents)\n      .catch(err => console.log(err));\n\n    const clickedAccident = this.state.clickedAccident;\n\n    if (Object.entries(clickedAccident).length !== 0) {\n      this.setState({\n        clickedAccident: {}\n      });\n    }\n  };\n\n  handleNotificationItemClick = clickAccident => {\n    this.setState({ clickedAccident: clickAccident });\n  };\n\n  handleAlertBoxClose = () => {\n    this.setState({\n      clickedAccident: {}\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <nav>Post Crash Help</nav>\n        <main>\n          <div className=\"listTitle\">All accidents</div>\n          <RecordList accidents={this.getAllServedAccidents()} />\n        </main>\n\n        <NotificationCenter\n          accidents={this.getAllUnServedAccidents()}\n          handleNotificationItemClick={this.handleNotificationItemClick}\n          handleServedBtnClick={this.handleServedBtnClick}\n        />\n        {Object.entries(this.state.clickedAccident).length === 0 ? null : (\n          <AlertPopup\n            accident={this.state.clickedAccident}\n            handleAlertBoxClose={this.handleAlertBoxClose}\n            handleServedBtnClick={this.handleServedBtnClick}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}